import asyncio
import aiohttp
import json
import os
import re
from datetime import datetime

try:
    import nest_asyncio
    nest_asyncio.apply()
    print("‚úÖ nest_asyncio –ø—Ä–∏–º–µ–Ω–µ–Ω –¥–ª—è ESOLLL AI Professional Analytics Engine")
except ImportError:
    print("‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install nest-asyncio")

class EsolllAIAnalyzer:
    def __init__(self, anthropic_api_key):
        self.anthropic_api_key = anthropic_api_key
        self.ai_headers = {
            'Content-Type': 'application/json',
            'x-api-key': anthropic_api_key,
            'anthropic-version': '2023-06-01'
        }
        self.problems_by_category = {
            "–æ–¥–µ–∂–¥–∞": {
                "–†–∞–∑–º–µ—Ä—ã": ["—Ä–∞–∑–º–µ—Ä", "–º–∞–ª–µ–Ω—å–∫–∏–π", "–±–æ–ª—å—à–æ–π", "–Ω–µ –ø–æ–¥–æ—à–µ–ª", "—Ä–∞–∑–º–µ—Ä–Ω–∞—è —Å–µ—Ç–∫–∞"],
                "–ö–∞—á–µ—Å—Ç–≤–æ —Ç–∫–∞–Ω–∏": ["—Ç–∫–∞–Ω—å", "–ª–∏–Ω—è–µ—Ç", "—Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è", "—Ä–≤–µ—Ç—Å—è", "—Ç–æ–Ω–∫–∞—è"],
                "–®–≤—ã": ["—à–≤—ã", "–Ω–∏—Ç–∫–∏", "—Ä–∞—Å–ø–æ–ª–∑–∞–µ—Ç—Å—è", "–∫—Ä–∏–≤—ã–µ —à–≤—ã"],
            },
            "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": {
                "–ü–æ–ª–æ–º–∫–∞": ["—Å–ª–æ–º–∞–ª—Å—è", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–ø–µ—Ä–µ–≥–æ—Ä–µ–ª", "—Å–≥–æ—Ä–µ–ª"],
                "–ë–∞—Ç–∞—Ä–µ—è": ["–Ω–µ –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è", "–±–∞—Ç–∞—Ä–µ—è", "—Ä–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è", "–±—ã—Å—Ç—Ä–æ —Å–∞–¥–∏—Ç—Å—è"],
                "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å": ["–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç", "–Ω–µ —Å–æ–≤–º–µ—Å—Ç–∏–º"],
                "–ö–∞—á–µ—Å—Ç–≤–æ —Å–±–æ—Ä–∫–∏": ["—Ö—Ä—É–ø–∫–∏–π", "–¥–µ—à–µ–≤—ã–π", "–ø–ª–∞—Å—Ç–∏–∫ –ø–ª–æ—Ö–æ–π"],
            },
            "default": {
                "–ö–∞—á–µ—Å—Ç–≤–æ": ["–¥–µ—à–µ–≤—ã–π", "—Ö—Ä—É–ø–∫–∏–π", "–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", "–ø–ª–æ—Ö–æ–π"],
                "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å": ["–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–π", "–≥–ª—é—á–∏—Ç"],
                "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": ["–æ–ø–∞—Å–Ω–æ", "–æ—Å—Ç—Ä—ã–µ –∫—Ä–∞—è", "—Ç–æ–∫—Å–∏—á–Ω—ã–π –∑–∞–ø–∞—Ö"],
                "–£–ø–∞–∫–æ–≤–∫–∞": ["–ø–ª–æ—Ö–∞—è —É–ø–∞–∫–æ–≤–∫–∞", "–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞", "–ø–æ–º—è—Ç"],
                "–ó–∞–ø–∞—Ö": ["–∑–∞–ø–∞—Ö", "–≤–æ–Ω—è–µ—Ç", "—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∑–∞–ø–∞—Ö"],
            }
        }
    
    async def analyze_with_esolll_ai(self, reviews, product_name, basic_analysis):
        """ü§ñ ESOLLL AI PROFESSIONAL ANALYSIS ENGINE"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ESOLLL AI
            reviews_sample = []
            for review in reviews[:25]:  # –ë–µ—Ä–µ–º 25 –ª—É—á—à–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è AI
                text = review.get('review_text', review.get('text', ''))
                rating = review.get('rating', review.get('review_rating', 5))
                if text and len(text.strip()) > 20:
                    reviews_sample.append({
                        'text': text[:600],  # –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç
                        'rating': rating,
                        'date': review.get('date', '')
                    })
            
            # –ü—Ä–æ–º–ø—Ç –¥–ª—è ESOLLL AI Professional Engine
            ai_prompt = f"""–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ ESOLLL AI Professional Analytics Engine –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–æ–º–º–µ—Ä—Ü–∏–∏.

–¢–û–í–ê–†: {product_name}

–û–¢–ó–´–í–´ –ü–û–ö–£–ü–ê–¢–ï–õ–ï–ô:
{json.dumps(reviews_sample, ensure_ascii=False, indent=2)}

–ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {basic_analysis.get('total_reviews', 0)}
- –†—É—Å—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {basic_analysis.get('russian_reviews', 0)}
- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {basic_analysis.get('critical_reviews_count', 0)}

–ó–ê–î–ê–ß–ò ESOLLL AI:
1. –í—ã–ø–æ–ª–Ω–∏ –≥–ª—É–±–æ–∫–∏–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤
2. –í—ã—è–≤–∏ —Å–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫
3. –û–ø—Ä–µ–¥–µ–ª–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
4. –°–æ—Å—Ç–∞–≤—å –¢–û–ü –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –±–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
5. –î–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Ä–∞–∑–≤–∏—Ç–∏—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
{{
    "esolll_ai_problems": [
        {{
            "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
            "description": "–¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
            "severity": "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è/–≤—ã—Å–æ–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–Ω–∏–∑–∫–∞—è",
            "business_impact": "–≤–ª–∏—è–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å",
            "frequency_estimate": "–ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç",
            "examples": ["–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –æ—Ç–∑—ã–≤–æ–≤"]
        }}
    ],
    "emotional_profile": {{
        "overall_mood": "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π/–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π/—Å–º–µ—à–∞–Ω–Ω—ã–π",
        "frustration_level": "—É—Ä–æ–≤–µ–Ω—å 1-10",
        "satisfaction_triggers": ["—á—Ç–æ —Ä–∞–¥—É–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"],
        "pain_triggers": ["—á—Ç–æ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"],
        "loyalty_risk": "—Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤"
    }},
    "professional_insights": {{
        "immediate_fixes": ["—Å—Ä–æ—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"],
        "strategic_improvements": ["—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è"],
        "competitive_positioning": "–ø–æ–∑–∏—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤",
        "market_opportunities": ["–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä—ã–Ω–∫–µ"],
        "critical_risks": ["–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏ –±–∏–∑–Ω–µ—Å–∞"]
    }},
    "esolll_predictions": {{
        "sales_trend": "–ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂",
        "quality_trend": "—Ç—Ä–µ–Ω–¥ –∫–∞—á–µ—Å—Ç–≤–∞",
        "customer_retention": "—É–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤",
        "return_forecast": "–ø—Ä–æ–≥–Ω–æ–∑ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤",
        "improvement_timeline": "—Å—Ä–æ–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π"
    }},
    "esolll_score": {{
        "product_rating": "–æ—Ü–µ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞ 1-10",
        "buy_recommendation": "–ø–æ–∫—É–ø–∞—Ç—å/–Ω–µ_–ø–æ–∫—É–ø–∞—Ç—å/–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ",
        "confidence": "—É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞",
        "risk_level": "–Ω–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π/–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"
    }}
}}

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞ –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç ESOLLL AI —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–ª—å–∑–æ–π!"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ ESOLLL AI Engine
            async with aiohttp.ClientSession() as session:
                ai_url = "https://api.anthropic.com/v1/messages"
                ai_payload = {
                    "model": "claude-3-5-sonnet-20241022",
                    "max_tokens": 4500,
                    "messages": [
                        {
                            "role": "user", 
                            "content": ai_prompt
                        }
                    ]
                }
                
                async with session.post(
                    ai_url, 
                    headers=self.ai_headers, 
                    json=ai_payload,
                    timeout=aiohttp.ClientTimeout(total=35)
                ) as response:
                    if response.status == 200:
                        ai_response = await response.json()
                        ai_content = ai_response['content'][0]['text']
                        
                        try:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ ESOLLL AI
                            json_start = ai_content.find('{')
                            json_end = ai_content.rfind('}') + 1
                            json_str = ai_content[json_start:json_end]
                            esolll_analysis = json.loads(json_str)
                            
                            print("‚úÖ ESOLLL AI PROFESSIONAL ANALYSIS COMPLETED!")
                            return esolll_analysis
                            
                        except json.JSONDecodeError as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ESOLLL AI: {e}")
                            print(f"AI –æ—Ç–≤–µ—Ç: {ai_content[:500]}...")
                            return self.create_fallback_analysis()
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ ESOLLL AI Engine: {response.status}")
                        return self.create_fallback_analysis()
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ ESOLLL AI Professional Engine: {e}")
            return self.create_fallback_analysis()
    
    def create_fallback_analysis(self):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ ESOLLL AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        return {
            "esolll_ai_problems": [
                {
                    "name": "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
                    "description": "ESOLLL AI Engine –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    "severity": "—Å—Ä–µ–¥–Ω—è—è",
                    "business_impact": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                    "frequency_estimate": "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
                    "examples": ["–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"]
                }
            ],
            "emotional_profile": {
                "overall_mood": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
                "frustration_level": "5",
                "satisfaction_triggers": ["–¢—Ä–µ–±—É–µ—Ç—Å—è AI –∞–Ω–∞–ª–∏–∑"],
                "pain_triggers": ["ESOLLL AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"],
                "loyalty_risk": "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            },
            "professional_insights": {
                "immediate_fixes": ["–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ESOLLL AI Engine"],
                "strategic_improvements": ["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"],
                "competitive_positioning": "–¢—Ä–µ–±—É–µ—Ç AI –∞–Ω–∞–ª–∏–∑–∞",
                "market_opportunities": ["–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ AI –∞–Ω–∞–ª–∏–∑–∞"],
                "critical_risks": ["–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"]
            },
            "esolll_predictions": {
                "sales_trend": "–¢—Ä–µ–±—É–µ—Ç AI –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è",
                "quality_trend": "–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑",
                "customer_retention": "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
                "return_forecast": "–¢—Ä–µ–±—É–µ—Ç AI –º–æ–¥–µ–ª–∏",
                "improvement_timeline": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AI Engine"
            },
            "esolll_score": {
                "product_rating": "7",
                "buy_recommendation": "–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ",
                "confidence": "–Ω–∏–∑–∫–∏–π - –Ω–µ—Ç AI –∞–Ω–∞–ª–∏–∑–∞",
                "risk_level": "—Å—Ä–µ–¥–Ω–∏–π"
            }
        }
    
    def determine_category(self, product_name):
        text = product_name.lower()
        if any(word in text for word in ["–æ–¥–µ–∂–¥–∞", "—Ñ—É—Ç–±–æ–ª–∫–∞", "–¥–∂–∏–Ω—Å—ã", "–ø–ª–∞—Ç—å–µ", "–±—Ä—é–∫–∏"]):
            return "–æ–¥–µ–∂–¥–∞"
        elif any(word in text for word in ["—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–∑–∞—Ä—è–¥–∫–∞", "–∫–∞–±–µ–ª—å", "–Ω–∞—É—à–Ω–∏–∫–∏", "—Ç—Ä–∏–º–º–µ—Ä"]):
            return "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"
        else:
            return "default"
    
    def filter_russian_reviews(self, reviews):
        russian_reviews = []
        for review in reviews:
            text = review.get('text', review.get('review_text', ''))
            if not text or len(text.strip()) < 15:
                continue
            
            russian_chars = sum(1 for char in text if '–∞' <= char.lower() <= '—è')
            total_chars = sum(1 for char in text if char.isalpha())
            
            if total_chars > 0 and (russian_chars / total_chars) > 0.5:
                normalized_review = {
                    'review_text': text,
                    'text': text,
                    'rating': review.get('rating', review.get('valuation', 5)),
                    'review_rating': review.get('rating', review.get('valuation', 5)),
                    'date': review.get('date', ''),
                    'answer': review.get('answer', '')
                }
                russian_reviews.append(normalized_review)
        
        return russian_reviews
    
    async def analyze_with_esolll_professional(self, reviews, product_name):
        """üöÄ ESOLLL AI PROFESSIONAL COMPREHENSIVE ANALYSIS"""
        russian_reviews = self.filter_russian_reviews(reviews)
        if not russian_reviews:
            return None
        
        category = self.determine_category(product_name)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
        enhanced_problems = {
            "–†–∞–∑–º–µ—Ä—ã –∏ –≥–∞–±–∞—Ä–∏—Ç—ã": ["—Ä–∞–∑–º–µ—Ä", "–º–∞–ª–µ–Ω—å–∫–∏–π", "–±–æ–ª—å—à–æ–π", "–Ω–µ –ø–æ–¥–æ—à–µ–ª", "—Ä–∞–∑–º–µ—Ä–Ω–∞—è —Å–µ—Ç–∫–∞", "–≤–µ–ª–∏–∫", "–º–∞–ª", "–Ω–µ —Ç–æ—Ç —Ä–∞–∑–º–µ—Ä"],
            "–ö–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤": ["–∫–∞—á–µ—Å—Ç–≤–æ", "–¥–µ—à–µ–≤—ã–π", "—Ö—Ä—É–ø–∫–∏–π", "–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", "–ø–ª–æ—Ö–æ–π", "—É–∂–∞—Å–Ω—ã–π", "–º–∞—Ç–µ—Ä–∏–∞–ª", "–ø–ª–∞—Å—Ç–∏–∫"],
            "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å": ["–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–π", "–≥–ª—é—á–∏—Ç", "—Å–ª–æ–º–∞–ª—Å—è", "–ø–æ–ª–æ–º–∫–∞", "–±—Ä–∞–∫", "–¥–µ—Ñ–µ–∫—Ç", "–Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç"],
            "–≠–Ω–µ—Ä–≥–æ–ø–∏—Ç–∞–Ω–∏–µ": ["–±–∞—Ç–∞—Ä–µ—è", "–Ω–µ –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è", "—Ä–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è", "–±—ã—Å—Ç—Ä–æ —Å–∞–¥–∏—Ç—Å—è", "–∑–∞—Ä—è–¥", "–∑–∞—Ä—è–¥–∫–∞", "–ø–∏—Ç–∞–Ω–∏–µ"],
            "–°–±–æ—Ä–∫–∞ –∏ —à–≤—ã": ["—à–≤—ã", "–Ω–∏—Ç–∫–∏", "—Ä–∞—Å–ø–æ–ª–∑–∞–µ—Ç—Å—è", "–∫—Ä–∏–≤—ã–µ —à–≤—ã", "–æ–±—Ç—Ä–µ–ø–∞–ª—Å—è", "—Å–±–æ—Ä–∫–∞", "—Ä–∞–∑–≤–∞–ª–∏–ª—Å—è"],
            "–ó–∞–ø–∞—Ö –∏ —Ö–∏–º–∏—è": ["–∑–∞–ø–∞—Ö", "–≤–æ–Ω—è–µ—Ç", "—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∑–∞–ø–∞—Ö", "–ø–∞—Ö–Ω–µ—Ç", "–≤–æ–Ω—å", "–Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–π –∑–∞–ø–∞—Ö", "—Ç–æ–∫—Å–∏—á–Ω—ã–π"],
            "–õ–æ–≥–∏—Å—Ç–∏–∫–∞": ["–¥–æ—Å—Ç–∞–≤–∫–∞", "—É–ø–∞–∫–æ–≤–∫–∞", "–ø–æ–º—è—Ç", "–ø–æ–≤—Ä–µ–∂–¥–µ–Ω", "–∫—É—Ä—å–µ—Ä", "–∏—Å–ø–æ—Ä—á–µ–Ω", "–±–∏—Ç—ã–π"],
            "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–ø–∏—Å–∞–Ω–∏—é": ["–æ–±–º–∞–Ω", "–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç", "–¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä", "–ø–æ–¥–¥–µ–ª–∫–∞", "–≤—Ä—É—Ç", "–Ω–µ–ø—Ä–∞–≤–¥–∞", "–Ω–µ —Ç–æ"],
            "–û–±—â–µ–µ —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ": ["–Ω–µ —Å–æ–≤–µ—Ç—É—é", "—É–∂–∞—Å", "–∫–æ—à–º–∞—Ä", "–≤–µ—Ä–Ω–∏—Ç–µ –¥–µ–Ω—å–≥–∏", "–∂–∞–ª–µ—é", "–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ", "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω"]
        }
        
        total_reviews = len(russian_reviews)
        problem_stats = {}
        critical_reviews = []
        positive_reviews = []
        neutral_reviews = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        for problem_name in enhanced_problems:
            problem_stats[problem_name] = {
                "count": 0,
                "percentage": 0,
                "examples": [],
                "detailed_reviews": []
            }
        
        for review in russian_reviews:
            text = review.get('review_text', '').lower()
            rating = review.get('rating', 5)
            original_text = review.get('review_text', '')
            
            review_data = {
                'text': original_text,
                'rating': rating,
                'date': review.get('date', ''),
                'short_text': original_text[:250] + "..." if len(original_text) > 250 else original_text
            }
            
            if rating <= 3:
                critical_reviews.append(review_data)
            elif rating >= 5:
                positive_reviews.append(review_data)
            else:
                neutral_reviews.append(review_data)
            
            # –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º —Å –≤–µ—Å–∞–º–∏
            for problem_name, keywords in enhanced_problems.items():
                problem_found = False
                for keyword in keywords:
                    if keyword in text:
                        problem_stats[problem_name]["count"] += 1
                        if len(problem_stats[problem_name]["examples"]) < 2:
                            example = original_text[:200].strip()
                            if example:
                                problem_stats[problem_name]["examples"].append(example + "...")
                        if len(problem_stats[problem_name]["detailed_reviews"]) < 3:
                            problem_stats[problem_name]["detailed_reviews"].append(review_data)
                        problem_found = True
                        break
                if problem_found:
                    break  # –û–¥–∏–Ω –æ—Ç–∑—ã–≤ = –æ–¥–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        for problem_name, data in problem_stats.items():
            if data["count"] > 0:
                data["percentage"] = round((data["count"] / total_reviews) * 100, 1)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        sorted_problems = sorted(
            [(name, data) for name, data in problem_stats.items() if data["count"] > 0],
            key=lambda x: x[1]["percentage"],
            reverse=True
        )
        
        best_positive = sorted(positive_reviews, key=lambda x: len(x['text']), reverse=True)[:3]
        worst_negative = sorted(critical_reviews, key=lambda x: len(x['text']), reverse=True)[:10]  # 10 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö
        
        # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤
        basic_analysis = {
            "product_name": product_name,
            "category": category,
            "total_reviews": len(reviews),
            "russian_reviews": total_reviews,
            "critical_reviews_count": len(critical_reviews),
            "positive_reviews_count": len(positive_reviews),
            "neutral_reviews_count": len(neutral_reviews),
            "problems": sorted_problems,
            "best_positive_reviews": best_positive,
            "worst_negative_reviews": worst_negative,
            "all_reviews": russian_reviews
        }
        
        print("ü§ñ –ó–ê–ü–£–°–ö ESOLLL AI PROFESSIONAL ENGINE...")
        esolll_ai_analysis = await self.analyze_with_esolll_ai(russian_reviews, product_name, basic_analysis)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑—ã
        basic_analysis["esolll_ai_analysis"] = esolll_ai_analysis
        basic_analysis["ai_powered"] = True
        
        return basic_analysis
    
    def calculate_risk_with_esolll_ai(self, analysis):
        """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ —Å ESOLLL AI"""
        if not analysis:
            return {
                "decision": "–ù–ï–¢",
                "decision_emoji": "‚ùå",
                "decision_reason": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                "risk_score": 100,
                "critical_percentage": 0,
                "positive_percentage": 0,
                "esolll_ai_influence": False
            }
        
        total_reviews = analysis["russian_reviews"]
        critical_percentage = (analysis["critical_reviews_count"] / total_reviews) * 100
        positive_percentage = (analysis["positive_reviews_count"] / total_reviews) * 100
        problems_count = len(analysis["problems"])
        top_problem_percentage = analysis["problems"][0][1]["percentage"] if analysis["problems"] else 0
        
        risk_score = 0
        
        # –ë–∞–∑–æ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
        if critical_percentage > 35:
            risk_score += 45
        elif critical_percentage > 20:
            risk_score += 25
        elif critical_percentage > 10:
            risk_score += 10
        
        if top_problem_percentage > 40:
            risk_score += 30
        elif top_problem_percentage > 25:
            risk_score += 20
        elif top_problem_percentage > 15:
            risk_score += 10
        
        if problems_count >= 6:
            risk_score += 20
        elif problems_count >= 4:
            risk_score += 15
        elif problems_count >= 2:
            risk_score += 10
        
        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        if positive_percentage > 70:
            risk_score -= 15
        elif positive_percentage > 50:
            risk_score -= 10
        elif positive_percentage > 30:
            risk_score -= 5
        
        # ESOLLL AI –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –æ—Ü–µ–Ω–∫—É
        esolll_ai_influence = False
        if "esolll_ai_analysis" in analysis:
            esolll_ai = analysis["esolll_ai_analysis"]
            esolll_ai_influence = True
            
            # AI –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            ai_rating = esolll_ai.get("esolll_score", {}).get("product_rating", "7")
            try:
                ai_rating_num = float(ai_rating)
            except:
                ai_rating_num = 7
            
            frustration = esolll_ai.get("emotional_profile", {}).get("frustration_level", "5")
            try:
                frustration_num = int(frustration)
            except:
                frustration_num = 5
            
            risk_level = esolll_ai.get("esolll_score", {}).get("risk_level", "—Å—Ä–µ–¥–Ω–∏–π")
            
            # AI –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ä–∏—Å–∫–∞
            if ai_rating_num <= 4:
                risk_score += 30
            elif ai_rating_num <= 6:
                risk_score += 15
            elif ai_rating_num >= 9:
                risk_score -= 20
            elif ai_rating_num >= 8:
                risk_score -= 10
            
            if frustration_num >= 8:
                risk_score += 25
            elif frustration_num >= 6:
                risk_score += 15
            elif frustration_num <= 3:
                risk_score -= 15
            
            if "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π" in risk_level.lower():
                risk_score += 25
            elif "–≤—ã—Å–æ–∫–∏–π" in risk_level.lower():
                risk_score += 15
            elif "–Ω–∏–∑–∫–∏–π" in risk_level.lower():
                risk_score -= 15
        
        risk_score = max(0, min(100, risk_score))
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        if risk_score >= 65:
            decision = "–ù–ï–¢"
            decision_emoji = "‚ùå"
            reason = f"–í–´–°–û–ö–ò–ô –†–ò–°–ö: {critical_percentage:.1f}% –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤"
            if esolll_ai_influence:
                reason += " + ESOLLL AI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ä–∏—Å–∫–∏"
        elif risk_score >= 35:
            decision = "–û–°–¢–û–†–û–ñ–ù–û"
            decision_emoji = "‚ö†Ô∏è"
            reason = f"–°–†–ï–î–ù–ò–ô –†–ò–°–ö: {critical_percentage:.1f}% –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤"
            if esolll_ai_influence:
                reason += " + ESOLLL AI —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å"
        else:
            decision = "–ü–û–ö–£–ü–ê–¢–¨"
            decision_emoji = "‚úÖ"
            reason = f"–ù–ò–ó–ö–ò–ô –†–ò–°–ö: {critical_percentage:.1f}% –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤"
            if esolll_ai_influence:
                reason += " + ESOLLL AI –æ–¥–æ–±—Ä—è–µ—Ç —Ç–æ–≤–∞—Ä"
        
        return {
            "decision": decision,
            "decision_emoji": decision_emoji,
            "decision_reason": reason,
            "risk_score": risk_score,
            "critical_percentage": round(critical_percentage, 1),
            "positive_percentage": round(positive_percentage, 1),
            "esolll_ai_influence": esolll_ai_influence,
            "esolll_ai_rating": ai_rating if esolll_ai_influence else None
        }

class EsolllEnhancedParser:
    def __init__(self, api_key):
        self.api_key = api_key
        self.headers = {
            'X-Mpstats-TOKEN': api_key,
            'Content-Type': 'application/json'
        }
    
    async def get_product_info(self, article_id):
        async with aiohttp.ClientSession() as session:
            try:
                url = f"https://mpstats.io/api/wb/get/item/{article_id}"
                async with session.get(url, headers=self.headers, timeout=aiohttp.ClientTimeout(total=12)) as response:
                    if response.status == 200:
                        data = await response.json()
                        if 'item' in data and data['item']:
                            product = data['item']
                            return {
                                'id': article_id,
                                'name': product.get('name', f'–¢–æ–≤–∞—Ä WB {article_id}'),
                                'brand': product.get('brand', ''),
                                'rating': product.get('rating', 0),
                                'comments': product.get('comments', 0),
                                'price': product.get('final_price', product.get('price', 0)),
                                'found': True
                            }
                        else:
                            return None
                    else:
                        return None
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
                return None
    
    async def get_extended_reviews(self, article_id, target_reviews=120):
        url = f"https://mpstats.io/api/wb/get/item/{article_id}/comments"
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(url, headers=self.headers, timeout=aiohttp.ClientTimeout(total=25)) as response:
                    if response.status == 200:
                        data = await response.json()
                        if isinstance(data, dict) and 'comments' in data:
                            comments = data['comments']
                            if comments and len(comments) > 0:
                                selected_comments = comments[:target_reviews]
                                normalized_reviews = []
                                for comment in selected_comments:
                                    if comment.get('text') and len(comment.get('text', '').strip()) >= 15:
                                        normalized_review = {
                                            'text': comment.get('text', ''),
                                            'review_text': comment.get('text', ''),
                                            'rating': comment.get('valuation', 5),
                                            'review_rating': comment.get('valuation', 5),
                                            'valuation': comment.get('valuation', 5),
                                            'date': comment.get('date', ''),
                                            'answer': comment.get('answer', '')
                                        }
                                        normalized_reviews.append(normalized_review)
                                return normalized_reviews
                            else:
                                return None
                        else:
                            return None
                    else:
                        return None
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {e}")
                return None

class EsolllAIReporter:
    def __init__(self):
        self.version = "ESOLLL AI Professional Analytics Engine"
    
    def select_top_10_critical_reviews(self, analysis):
        """üéØ –û–¢–ë–û–† 10 –°–ê–ú–´–• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–¢–ó–´–í–û–í"""
        if not analysis.get('all_reviews'):
            return []
        
        product_name = analysis.get('product_name', '')
        
        # –£–º–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≤–∞—Ä–∞
        smart_problems = self.get_smart_problem_categories(product_name)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        all_keywords = []
        for keywords_list in smart_problems.values():
            all_keywords.extend(keywords_list)
        
        # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        negative_indicators = ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω', '–∂–∞–ª–µ—é', '–≤–µ—Ä–Ω–∏—Ç–µ', 
                              '–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é', '–Ω–µ —Å–æ–≤–µ—Ç—É—é', '–±—Ä–µ–¥', '—Ñ–∏–≥–Ω—è', '–æ—Ç—Å—Ç–æ–π', '—Ä–∞–∑–≤–æ–¥',
                              '–∫–æ—à–º–∞—Ä', '—É–∂–∞—Å', '–¥–µ–Ω—å–≥–∏ –Ω–∞ –≤–µ—Ç–µ—Ä', '–æ–±–º–∞–Ω', '–ø–æ–¥–¥–µ–ª–∫–∞']
        
        candidate_reviews = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ—Ç–∑—ã–≤
        for review in analysis['all_reviews']:
            rating = review.get('rating', 5)
            text = review.get('text', '')
            text_lower = text.lower()
            
            # –ò—Å–∫–ª—é—á–∞–µ–º —Ö–æ—Ä–æ—à–∏–µ –æ—Ç–∑—ã–≤—ã –∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ
            if rating >= 5 or len(text.strip()) < 30:
                continue
            
            review_score = 0
            matched_problems = []
            
            # –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            for problem_category, keywords in smart_problems.items():
                matches = sum(1 for keyword in keywords if keyword in text_lower)
                if matches > 0:
                    matched_problems.append({
                        'name': problem_category,
                        'severity': '–≤—ã—Å–æ–∫–∞—è' if matches >= 2 else '—Å—Ä–µ–¥–Ω—è—è',
                        'matches': matches
                    })
                    review_score += matches * 6  # –í—ã—Å–æ–∫–∏–π –≤–µ—Å –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            
            # –ü–æ–∏—Å–∫ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            negative_count = sum(1 for indicator in negative_indicators if indicator in text_lower)
            review_score += negative_count * 4
            
            # –ë–æ–Ω—É—Å—ã –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥
            if rating <= 2:
                review_score += 20
            elif rating == 3:
                review_score += 15
            elif rating == 4:
                review_score += 8
            
            # –ë–æ–Ω—É—Å –∑–∞ –¥–ª–∏–Ω—É (–±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π)
            if len(text) > 100:
                review_score += 5
            if len(text) > 200:
                review_score += 5
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è
            if review_score >= 8:
                if not matched_problems:
                    matched_problems = [{'name': '–û–±—â–µ–µ –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ', 'severity': '—Å—Ä–µ–¥–Ω—è—è', 'matches': 1}]
                
                candidate_reviews.append({
                    'text': text,
                    'rating': rating,
                    'date': review.get('date', ''),
                    'score': review_score,
                    'matched_problems': matched_problems,
                    'problem_summary': self.extract_problem_summary(text, matched_problems)
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        candidate_reviews.sort(key=lambda x: (x['score'], 5 - x['rating'], len(x['text'])), reverse=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-10
        return candidate_reviews[:10]
    
    def get_smart_problem_categories(self, product_name):
        """–£–º–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≤–∞—Ä–∞"""
        product_lower = product_name.lower()
        
        if any(word in product_lower for word in ["—Å—É—à–∏–ª–∫–∞", "—Ü–µ–Ω—Ç—Ä–∏—Ñ—É–≥–∞", "—Å–∞–ª–∞—Ç"]):
            return {
                "–ü—Ä–æ–±–ª–µ–º—ã —Å—É—à–∫–∏": ["–Ω–µ —Å—É—à–∏—Ç", "–ø–ª–æ—Ö–æ —Å—É—à–∏—Ç", "–º–æ–∫—Ä—ã–π", "–≤–ª–∞–∂–Ω—ã–π", "–Ω–µ –≤—ã—Å—ã—Ö–∞–µ—Ç"],
                "–ú–µ—Ö–∞–Ω–∏–∑–º –≤—Ä–∞—â–µ–Ω–∏—è": ["–Ω–µ –∫—Ä—É—Ç–∏—Ç—Å—è", "—Å–ª–∞–±–æ –∫—Ä—É—Ç–∏—Ç—Å—è", "–∑–∞–µ–¥–∞–µ—Ç", "—Ç–æ—Ä–º–æ–∑–∏—Ç", "–º–µ–¥–ª–µ–Ω–Ω–æ"],
                "–†–∞–∑–º–µ—Ä –∫–æ—Ä–∑–∏–Ω—ã": ["–º–∞–ª–µ–Ω—å–∫–∞—è", "–±–æ–ª—å—à–∞—è", "–Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è", "–º–∞–ª–æ –º–µ—Å—Ç–∞"],
                "–ö–∞—á–µ—Å—Ç–≤–æ —Å–±–æ—Ä–∫–∏": ["—Ä–∞–∑–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è", "—Ö–ª–∏–ø–∫–∏–π", "–Ω–µ—É—Å—Ç–æ–π—á–∏–≤—ã–π", "—à–∞—Ç–∞–µ—Ç—Å—è"],
                "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã": ["–ø–ª–∞—Å—Ç–∏–∫", "—Ç–æ–Ω–∫–∏–π", "—Ö—Ä—É–ø–∫–∏–π", "–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª"]
            }
        elif any(word in product_lower for word in ["–Ω–∞—É—à–Ω–∏–∫–∏", "bluetooth", "tws"]):
            return {
                "–ö–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞": ["—Ç–∏—Ö–∏–π", "–∏—Å–∫–∞–∂–µ–Ω–∏—è", "–±–∞—Å—ã", "–∑–≤—É–∫ –ø–ª–æ—Ö–æ–π", "—à–∏–ø–∏—Ç"],
                "Bluetooth —Å–≤—è–∑—å": ["–Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è", "–æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è", "—Ç–µ—Ä—è–µ—Ç —Å–≤—è–∑—å", "bluetooth"],
                "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã": ["–±—ã—Å—Ç—Ä–æ —Ä–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è", "–Ω–µ –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è", "–¥–µ—Ä–∂–∏—Ç –∑–∞—Ä—è–¥", "–±–∞—Ç–∞—Ä–µ—è"],
                "–ö–æ–º—Ñ–æ—Ä—Ç": ["–≤—ã–ø–∞–¥–∞—é—Ç", "–Ω–µ—É–¥–æ–±–Ω—ã–µ", "–¥–∞–≤—è—Ç", "–±–æ–ª—è—Ç —É—à–∏"],
                "–ú–∏–∫—Ä–æ—Ñ–æ–Ω": ["–Ω–µ —Å–ª—ã—à–Ω–æ", "–º–∏–∫—Ä–æ—Ñ–æ–Ω", "–ø–ª–æ—Ö–æ —Å–ª—ã—à–∞—Ç", "—ç—Ö–æ"]
            }
        elif any(word in product_lower for word in ["–∑–∞—Ä—è–¥–∫–∞", "–∫–∞–±–µ–ª—å", "–ø—Ä–æ–≤–æ–¥"]):
            return {
                "–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞—Ä—è–¥–∫–∏": ["–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞—Ä—è–∂–∞–µ—Ç", "–¥–æ–ª–≥–æ –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è", "—Å–ª–∞–±–∞—è –∑–∞—Ä—è–¥–∫–∞"],
                "–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å": ["–ª–æ–º–∞–µ—Ç—Å—è", "–æ—Ç—Ö–æ–¥–∏—Ç", "–Ω–µ –∑–∞—Ä—è–∂–∞–µ—Ç", "–ø–µ—Ä–µ—Å—Ç–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å"],
                "–†–∞–∑–º–µ—Ä—ã": ["–∫–æ—Ä–æ—Ç–∫–∏–π", "–¥–ª–∏–Ω–Ω—ã–π", "–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–ª–∏–Ω—ã"],
                "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å": ["–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç", "–Ω–µ —Å–æ–≤–º–µ—Å—Ç–∏–º", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å"],
                "–ö–∞—á–µ—Å—Ç–≤–æ": ["—Ç–æ–Ω–∫–∏–π", "–¥–µ—à–µ–≤—ã–π", "—Ä–≤–µ—Ç—Å—è", "–≥–Ω–µ—Ç—Å—è"]
            }
        else:
            return {
                "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å": ["–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–π", "–≥–ª—é—á–∏—Ç", "—Å–ª–æ–º–∞–ª—Å—è"],
                "–ö–∞—á–µ—Å—Ç–≤–æ": ["–¥–µ—à–µ–≤—ã–π", "—Ö—Ä—É–ø–∫–∏–π", "–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", "–ø–ª–æ—Ö–æ–π"],
                "–†–∞–∑–º–µ—Ä—ã": ["—Ä–∞–∑–º–µ—Ä", "–º–∞–ª–µ–Ω—å–∫–∏–π", "–±–æ–ª—å—à–æ–π", "–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç"],
                "–°–±–æ—Ä–∫–∞": ["—Ä–∞–∑–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è", "–Ω–µ—É—Å—Ç–æ–π—á–∏–≤—ã–π", "—Ö–ª–∏–ø–∫–∏–π", "–ø–ª–æ—Ö–∞—è —Å–±–æ—Ä–∫–∞"],
                "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã": ["–º–∞—Ç–µ—Ä–∏–∞–ª", "–ø–ª–∞—Å—Ç–∏–∫", "–º–µ—Ç–∞–ª–ª", "—Ç–∫–∞–Ω—å"]
            }
    
    def extract_problem_summary(self, text, matched_problems):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"""
        sentences = text.split('.')
        problem_sentences = []
        
        for sentence in sentences[:3]:  # –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            sentence_clean = sentence.strip()
            if len(sentence_clean) > 15:
                for problem in matched_problems:
                    if any(word in sentence_clean.lower() for word in problem['name'].lower().split()):
                        problem_sentences.append(sentence_clean)
                        break
        
        if problem_sentences:
            return problem_sentences[0][:150] + "..." if len(problem_sentences[0]) > 150 else problem_sentences[0]
        else:
            return text[:120] + "..." if len(text) > 120 else text
    
    def create_critical_reviews_section(self, analysis):
        """üìù –°–ï–ö–¶–ò–Ø 10 –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–¢–ó–´–í–û–í"""
        critical_reviews = self.select_top_10_critical_reviews(analysis)
        
        if not critical_reviews:
            return f"""
            <div class="critical-reviews-section">
                <h2>üí¨ –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤</h2>
                <div class="excellent-status">
                    <div class="status-icon">üéâ</div>
                    <h3>–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</h3>
                    <p>–°—Ä–µ–¥–∏ {analysis.get('total_reviews', 0)} –æ—Ç–∑—ã–≤–æ–≤ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–º–µ—á–∞–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.</p>
                    <div class="positive-indicators">
                        <div class="indicator">‚úÖ –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∂–∞–ª–æ–±</div>
                        <div class="indicator">üèÜ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞</div>
                        <div class="indicator">üòä –î–æ–≤–æ–ª—å–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏</div>
                    </div>
                </div>
            </div>
            """
        
        reviews_html = f"""
        <div class="critical-reviews-section">
            <h2>üí¨ 10 —Å–∞–º—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π</h2>
            <div class="section-description">
                –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
            </div>
            
            <div class="reviews-stats">
                <div class="stat-card">
                    <div class="stat-number">{len(critical_reviews)}</div>
                    <div class="stat-label">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{analysis.get('total_reviews', 0)}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{analysis.get('critical_percentage', 0)}%</div>
                    <div class="stat-label">–î–æ–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö</div>
                </div>
            </div>
            
            <div class="critical-reviews-grid">"""
        
        for i, review in enumerate(critical_reviews, 1):
            severity_class = "severity-high" if review.get('score', 0) >= 20 else "severity-medium" if review.get('score', 0) >= 15 else "severity-low"
            severity_text = "–ö–†–ò–¢–ò–ß–ù–û" if review.get('score', 0) >= 20 else "–í–ê–ñ–ù–û" if review.get('score', 0) >= 15 else "–í–ù–ò–ú–ê–ù–ò–ï"
            
            problems_list = ", ".join([p.get('name', '–ü—Ä–æ–±–ª–µ–º–∞') for p in review.get('matched_problems', [])[:2]])
            if not problems_list:
                problems_list = "–û–±—â–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏"
            
            reviews_html += f"""
                <div class="critical-review-card {severity_class}">
                    <div class="review-header">
                        <div class="review-number">#{i}</div>
                        <div class="review-rating">‚≠ê {review.get('rating', 1)}/5</div>
                        <div class="severity-badge">{severity_text}</div>
                    </div>
                    
                    <div class="review-content">
                        <div class="review-text">
                            "{review.get('text', '–¢–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}"
                        </div>
                        
                        <div class="review-analysis">
                            <div class="problems-found">
                                <strong>üéØ –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</strong> {problems_list}
                            </div>
                            <div class="problem-summary">
                                <strong>üìã –°—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã:</strong> {review.get('problem_summary', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è')}
                            </div>
                        </div>
                        
                        <div class="review-meta">
                            <span class="review-date">üìÖ {review.get('date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}</span>
                            <span class="review-score">–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {review.get('score', 0)}/30</span>
                        </div>
                    </div>
                </div>"""
        
        reviews_html += """
            </div>
        </div>"""
        
        return reviews_html
    
    def create_esolll_ai_insights_section(self, esolll_ai_analysis):
        """ü§ñ –°–ï–ö–¶–ò–Ø ESOLLL AI INSIGHTS"""
        if not esolll_ai_analysis:
            return """
            <div class="ai-unavailable">
                <h3>ü§ñ ESOLLL AI Professional Engine –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h3>
                <p>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∞–Ω–∞–ª–∏–∑–∞</p>
            </div>
            """
        
        ai_problems = esolll_ai_analysis.get("esolll_ai_problems", [])
        emotional_profile = esolll_ai_analysis.get("emotional_profile", {})
        insights = esolll_ai_analysis.get("professional_insights", {})
        predictions = esolll_ai_analysis.get("esolll_predictions", {})
        esolll_score = esolll_ai_analysis.get("esolll_score", {})
        
        ai_html = f"""
        <div class="esolll-ai-section">
            <div class="ai-header">
                <div class="ai-logo">ü§ñ</div>
                <div class="ai-title">
                    <h2>ESOLLL AI Professional Analytics Engine</h2>
                    <p>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º</p>
                </div>
                <div class="ai-badge">AI PRO</div>
            </div>
            
            <div class="ai-score-panel">
                <div class="main-score">
                    <div class="score-value">{esolll_score.get('product_rating', 'N/A')}/10</div>
                    <div class="score-title">ESOLLL AI –û—Ü–µ–Ω–∫–∞</div>
                </div>
                <div class="recommendation-panel">
                    <div class="recommendation {self.get_recommendation_class(esolll_score.get('buy_recommendation', '–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ'))}">
                        {esolll_score.get('buy_recommendation', '–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ').upper()}
                    </div>
                    <div class="risk-level">–†–∏—Å–∫: {esolll_score.get('risk_level', '—Å—Ä–µ–¥–Ω–∏–π')}</div>
                    <div class="confidence">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {esolll_score.get('confidence', '—Å—Ä–µ–¥–Ω—è—è')}</div>
                </div>
            </div>
            
            <div class="ai-insights-grid">
                <div class="ai-card problems-card">
                    <h3>üß† AI-–æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã</h3>
                    <div class="ai-problems-list">"""
        
        for problem in ai_problems[:4]:
            severity = problem.get('severity', '—Å—Ä–µ–¥–Ω—è—è')
            severity_class = self.get_severity_class(severity)
            ai_html += f"""
                        <div class="ai-problem {severity_class}">
                            <div class="problem-name">{problem.get('name', '–ü—Ä–æ–±–ª–µ–º–∞')}</div>
                            <div class="problem-description">{problem.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}</div>
                            <div class="problem-meta">
                                <span class="severity">–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {severity}</span>
                                <span class="frequency">–ß–∞—Å—Ç–æ—Ç–∞: {problem.get('frequency_estimate', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</span>
                            </div>
                        </div>"""
        
        ai_html += f"""
                    </div>
                </div>
                
                <div class="ai-card emotional-card">
                    <h3>üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å</h3>
                    <div class="emotional-metrics">
                        <div class="metric">
                            <span class="metric-label">–û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</span>
                            <span class="metric-value {self.get_mood_class(emotional_profile.get('overall_mood', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π'))}">{emotional_profile.get('overall_mood', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π')}</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">–£—Ä–æ–≤–µ–Ω—å —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏–∏:</span>
                            <span class="metric-value frustration-level">{emotional_profile.get('frustration_level', '5')}/10</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">–†–∏—Å–∫ –ø–æ—Ç–µ—Ä–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:</span>
                            <span class="metric-value">{emotional_profile.get('loyalty_risk', '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}</span>
                        </div>
                    </div>
                    
                    <div class="emotional-details">
                        <div class="satisfaction-triggers">
                            <h4>üòä –ß—Ç–æ —Ä–∞–¥—É–µ—Ç:</h4>
                            <ul>"""
        
        for trigger in emotional_profile.get('satisfaction_triggers', ['–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...'])[:3]:
            ai_html += f"<li>{trigger}</li>"
        
        ai_html += f"""
                            </ul>
                        </div>
                        <div class="pain-triggers">
                            <h4>üò∞ –ß—Ç–æ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç:</h4>
                            <ul>"""
        
        for trigger in emotional_profile.get('pain_triggers', ['–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...'])[:3]:
            ai_html += f"<li>{trigger}</li>"
        
        ai_html += f"""
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="ai-recommendations-row">
                <div class="ai-card recommendations-card">
                    <h3>üéØ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ESOLLL AI</h3>
                    
                    <div class="recommendations-section">
                        <div class="immediate-fixes">
                            <h4>üö® –°—Ä–æ—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</h4>
                            <ul>"""
        
        for fix in insights.get('immediate_fixes', ['AI –∞–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'])[:4]:
            ai_html += f"<li>{fix}</li>"
        
        ai_html += f"""
                            </ul>
                        </div>
                        
                        <div class="strategic-improvements">
                            <h4>üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è:</h4>
                            <ul>"""
        
        for improvement in insights.get('strategic_improvements', ['AI –∞–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'])[:4]:
            ai_html += f"<li>{improvement}</li>"
        
        ai_html += f"""
                            </ul>
                        </div>
                    </div>
                    
                    <div class="business-insights">
                        <div class="insight-item">
                            <strong>–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:</strong> {insights.get('competitive_positioning', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è')}
                        </div>
                        <div class="insight-item">
                            <strong>–†—ã–Ω–æ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</strong> {', '.join(insights.get('market_opportunities', ['–û–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è'])[:2])}
                        </div>
                        <div class="insight-item">
                            <strong>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏:</strong> {', '.join(insights.get('critical_risks', ['–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è'])[:2])}
                        </div>
                    </div>
                </div>
                
                <div class="ai-card predictions-card">
                    <h3>üîÆ AI-–ø—Ä–æ–≥–Ω–æ–∑—ã ESOLLL</h3>
                    <div class="predictions-grid">
                        <div class="prediction-item">
                            <div class="prediction-label">–¢—Ä–µ–Ω–¥ –ø—Ä–æ–¥–∞–∂:</div>
                            <div class="prediction-value">{predictions.get('sales_trend', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è')}</div>
                        </div>
                        <div class="prediction-item">
                            <div class="prediction-label">–ö–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</div>
                            <div class="prediction-value">{predictions.get('quality_trend', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è')}</div>
                        </div>
                        <div class="prediction-item">
                            <div class="prediction-label">–£–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤:</div>
                            <div class="prediction-value">{predictions.get('customer_retention', '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è')}</div>
                        </div>
                        <div class="prediction-item">
                            <div class="prediction-label">–ü—Ä–æ–≥–Ω–æ–∑ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤:</div>
                            <div class="prediction-value">{predictions.get('return_forecast', '–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è')}</div>
                        </div>
                        <div class="prediction-item">
                            <div class="prediction-label">–°—Ä–æ–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π:</div>
                            <div class="prediction-value">{predictions.get('improvement_timeline', '–ü–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è')}</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>"""
        
        return ai_html
    
    def get_recommendation_class(self, recommendation):
        if recommendation.lower() in ['–ø–æ–∫—É–ø–∞—Ç—å']:
            return 'rec-positive'
        elif recommendation.lower() in ['–Ω–µ_–ø–æ–∫—É–ø–∞—Ç—å']:
            return 'rec-negative'
        else:
            return 'rec-neutral'
    
    def get_severity_class(self, severity):
        if severity.lower() in ['–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è', '–≤—ã—Å–æ–∫–∞—è']:
            return 'sev-high'
        elif severity.lower() == '—Å—Ä–µ–¥–Ω—è—è':
            return 'sev-medium'
        else:
            return 'sev-low'
    
    def get_mood_class(self, mood):
        if mood.lower() == '–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π':
            return 'mood-positive'
        elif mood.lower() == '–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π':
            return 'mood-negative'
        else:
            return 'mood-neutral'
    
    def generate_esolll_ai_report(self, analysis, risk_data, article_id, product_data):
        """üöÄ –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û ESOLLL AI –û–¢–ß–ï–¢–ê"""
        try:
            esolll_ai_analysis = analysis.get("esolll_ai_analysis", {})
            critical_reviews_section = self.create_critical_reviews_section(analysis)
            ai_insights_section = self.create_esolll_ai_insights_section(esolll_ai_analysis)
            
            html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ESOLLL AI Professional Report - {article_id}</title>
    <style>
        {self.get_esolll_professional_styles()}
    </style>
</head>
<body>
    <div class="container">
        {self.create_professional_header(article_id)}
        
        <div class="product-section">
            <div class="product-card">
                <div class="product-name">üì¶ {product_data['name']}</div>
                <div class="product-details">
                    <div class="detail-item">
                        <div class="detail-value">{product_data['brand']}</div>
                        <div class="detail-label">–ë—Ä–µ–Ω–¥</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-value">‚≠ê {product_data['rating']}/5</div>
                        <div class="detail-label">–†–µ–π—Ç–∏–Ω–≥</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-value">{product_data['comments']}</div>
                        <div class="detail-label">–û—Ç–∑—ã–≤–æ–≤</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-value">{product_data['price']} ‚ÇΩ</div>
                        <div class="detail-label">–¶–µ–Ω–∞</div>
                    </div>
                </div>
            </div>
        </div>
        
        {self.create_professional_decision_box(risk_data)}
        
        {critical_reviews_section}
        
        {ai_insights_section}
        
        <div class="pdf-export-section">
            <div class="export-header">
                <h3>üìÑ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞</h3>
                <p>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ESOLLL AI –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF</p>
            </div>
            
            <div class="export-buttons">
                <button onclick="window.print()" class="export-btn primary">
                    üñ®Ô∏è –°–∫–∞—á–∞—Ç—å PDF
                </button>
                <button onclick="shareReport()" class="export-btn secondary">
                    üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                </button>
            </div>
            
            <div class="export-features">
                <div class="feature-item">
                    <div class="feature-icon">ü§ñ</div>
                    <div class="feature-text">
                        <strong>ESOLLL AI –∞–Ω–∞–ª–∏–∑</strong><br>
                        –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è
                    </div>
                </div>
                <div class="feature-item">
                    <div class="feature-icon">üí¨</div>
                    <div class="feature-text">
                        <strong>10 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤</strong><br>
                        –ü–æ–ª–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –≤ –æ—Ç—á–µ—Ç–µ
                    </div>
                </div>
                <div class="feature-item">
                    <div class="feature-icon">üì±</div>
                    <div class="feature-text">
                        <strong>–ú–æ–±–∏–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</strong><br>
                        –ß–∏—Ç–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
                    </div>
                </div>
            </div>
        </div>
        
        <script>
        function shareReport() {{
            if (navigator.share) {{
                navigator.share({{
                    title: 'ESOLLL AI Professional Report',
                    text: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞ –æ—Ç ESOLLL AI',
                    url: window.location.href
                }});
            }} else {{
                navigator.clipboard.writeText(window.location.href).then(() => {{
                    alert('üîó –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
                }});
            }}
        }}
        
        window.addEventListener('beforeprint', function() {{
            document.body.classList.add('printing');
        }});
        
        window.addEventListener('afterprint', function() {{
            document.body.classList.remove('printing');
        }});
        </script>
        
        {self.create_professional_footer()}
    </div>
</body>
</html>
            """
            
            return html_content
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò ESOLLL AI –û–¢–ß–ï–¢–ê: {e}")
            return self.generate_error_report(article_id)
    
    def create_professional_header(self, article_id):
        return f"""
        <div class="professional-header">
            <div class="header-badge">AI PROFESSIONAL</div>
            <div class="ai-icon">ü§ñ</div>
            <h1>ESOLLL AI Professional Analytics Engine</h1>
            <p>–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º ‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª: {article_id}</p>
            <div class="capabilities">
                <span class="capability">üß† –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑</span>
                <span class="capability">üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</span>
                <span class="capability">üîÆ AI-–ø—Ä–æ–≥–Ω–æ–∑—ã</span>
                <span class="capability">üéØ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</span>
            </div>
            <p class="developer">–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Almas Kasymzhanov</p>
        </div>
        """
    
    def create_professional_decision_box(self, risk_data):
        decision_class = 'decision-neutral'
        if risk_data['decision'] == '–ü–û–ö–£–ü–ê–¢–¨':
            decision_class = 'decision-positive'
        elif risk_data['decision'] == '–ù–ï–¢':
            decision_class = 'decision-negative'
        
        esolll_ai_text = ""
        if risk_data.get('esolll_ai_influence'):
            esolll_ai_text = f"<br><div class='ai-influence'>ü§ñ ESOLLL AI –æ—Ü–µ–Ω–∫–∞: {risk_data.get('esolll_ai_rating', '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}/10</div>"
        
        return f"""
        <div class="professional-decision {decision_class}">
            {risk_data['decision_emoji']} <strong>ESOLLL AI –†–ï–®–ï–ù–ò–ï: {risk_data['decision']}</strong>
            <div class="decision-details">
                {risk_data['decision_reason']}
                {esolll_ai_text}
            </div>
        </div>
        """
    
    def get_esolll_professional_styles(self):
        return """
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body { 
            font-family: 'Segoe UI', -apple-system, BlinkMacSystemFont, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: #ffffff;
            border-radius: 24px;
            box-shadow: 0 25px 80px rgba(0,0,0,0.3);
            overflow: hidden;
        }
        
        /* –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ó–ê–ì–û–õ–û–í–û–ö */
        .professional-header {
            background: linear-gradient(135deg, #667eea, #764ba2, #f093fb);
            color: white;
            padding: 50px 40px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }
        
        .professional-header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 50%);
            animation: pulse 6s ease-in-out infinite;
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1) rotate(0deg); opacity: 0.3; }
            50% { transform: scale(1.2) rotate(180deg); opacity: 0.7; }
        }
        
        .header-badge {
            position: absolute;
            top: 25px;
            right: 25px;
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            padding: 12px 20px;
            border-radius: 30px;
            font-weight: bold;
            font-size: 14px;
            box-shadow: 0 8px 25px rgba(255,107,107,0.4);
            z-index: 10;
        }
        
        .ai-icon {
            font-size: 64px;
            margin-bottom: 20px;
            animation: float 4s ease-in-out infinite;
            z-index: 5;
            position: relative;
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-15px); }
        }
        
        .professional-header h1 {
            font-size: 38px;
            font-weight: 700;
            margin-bottom: 15px;
            z-index: 5;
            position: relative;
        }
        
        .professional-header > p {
            font-size: 18px;
            opacity: 0.9;
            margin-bottom: 25px;
            z-index: 5;
            position: relative;
        }
        
        .capabilities {
            display: flex;
            justify-content: center;
            gap: 15px;
            flex-wrap: wrap;
            margin-bottom: 20px;
            z-index: 5;
            position: relative;
        }
        
        .capability {
            background: rgba(255,255,255,0.2);
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 14px;
            backdrop-filter: blur(10px);
        }
        
        .developer {
            font-size: 14px;
            opacity: 0.8;
            z-index: 5;
            position: relative;
        }
        
        /* –ü–†–û–î–£–ö–¢ –°–ï–ö–¶–ò–Ø */
        .product-section {
            padding: 40px;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        }
        
        .product-card {
            background: white;
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 15px 40px rgba(0,0,0,0.1);
            border-left: 6px solid #667eea;
        }
        
        .product-name {
            font-size: 24px;
            font-weight: 700;
            color: #333;
            margin-bottom: 25px;
        }
        
        .product-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }
        
        .detail-item {
            text-align: center;
            padding: 20px;
            background: linear-gradient(135deg, #f8f9fa, #ffffff);
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        }
        
        .detail-value {
            font-size: 22px;
            font-weight: 700;
            color: #667eea;
            margin-bottom: 5px;
        }
        
        .detail-label {
            font-size: 14px;
            color: #666;
            font-weight: 500;
        }
        
        /* –†–ï–®–ï–ù–ò–ï */
        .professional-decision {
            margin: 40px;
            padding: 35px;
            border-radius: 20px;
            text-align: center;
            font-size: 22px;
            font-weight: 700;
            box-shadow: 0 15px 50px rgba(0,0,0,0.15);
            position: relative;
            overflow: hidden;
        }
        
        .professional-decision::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
            animation: shine 4s infinite;
        }
        
        @keyframes shine {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        .decision-details {
            font-size: 16px;
            font-weight: 400;
            margin-top: 15px;
            z-index: 2;
            position: relative;
        }
        
        .ai-influence {
            background: rgba(255,255,255,0.3);
            padding: 10px 20px;
            border-radius: 15px;
            display: inline-block;
            margin-top: 15px;
            font-size: 14px;
            backdrop-filter: blur(10px);
        }
        
        .decision-positive {
            background: linear-gradient(135deg, #d4edda, #c3e6cb);
            color: #155724;
            border: 3px solid #28a745;
        }
        
        .decision-negative {
            background: linear-gradient(135deg, #f8d7da, #f5c6cb);
            color: #721c24;
            border: 3px solid #dc3545;
        }
        
        .decision-neutral {
            background: linear-gradient(135deg, #fff3cd, #ffeaa7);
            color: #856404;
            border: 3px solid #ffc107;
        }
        
        /* –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–¢–ó–´–í–´ */
        .critical-reviews-section {
            padding: 40px;
            background: linear-gradient(135deg, #fff5f5, #ffeee8);
        }
        
        .critical-reviews-section h2 {
            color: #dc3545;
            font-size: 28px;
            margin-bottom: 20px;
            text-align: center;
            font-weight: 700;
        }
        
        .section-description {
            text-align: center;
            color: #666;
            margin-bottom: 30px;
            font-size: 16px;
            font-style: italic;
        }
        
        .reviews-stats {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin-bottom: 40px;
        }
        
        .stat-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(220,53,69,0.1);
            border-top: 4px solid #dc3545;
        }
        
        .stat-number {
            font-size: 32px;
            font-weight: 700;
            color: #dc3545;
            margin-bottom: 8px;
        }
        
        .stat-label {
            font-size: 14px;
            color: #666;
            font-weight: 500;
        }
        
        .critical-reviews-grid {
            display: grid;
            gap: 25px;
        }
        
        .critical-review-card {
            background: white;
            border-radius: 20px;
            box-shadow: 0 15px 40px rgba(0,0,0,0.1);
            overflow: hidden;
            border-left: 6px solid #dc3545;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .critical-review-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 25px 60px rgba(0,0,0,0.15);
        }
        
        .severity-high { border-left-color: #dc3545; }
        .severity-medium { border-left-color: #fd7e14; }
        .severity-low { border-left-color: #ffc107; }
        
        .review-header {
            background: linear-gradient(135deg, #fff5f5, #ffeee8);
            padding: 20px 25px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #f0f0f0;
        }
        
        .review-number {
            background: #dc3545;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            font-size: 16px;
        }
        
        .review-rating {
            font-weight: 700;
            color: #dc3545;
            font-size: 16px;
        }
        
        .severity-badge {
            background: #dc3545;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 700;
        }
        
        .review-content {
            padding: 25px;
        }
        
        .review-text {
            font-size: 16px;
            line-height: 1.7;
            color: #333;
            font-style: italic;
            margin-bottom: 20px;
            padding: 20px;
            background: #fff5f5;
            border-radius: 12px;
            border-left: 4px solid #dc3545;
        }
        
        .review-analysis {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 15px;
        }
        
        .problems-found, .problem-summary {
            margin-bottom: 10px;
            font-size: 14px;
            color: #495057;
        }
        
        .review-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 12px;
            color: #666;
            padding-top: 15px;
            border-top: 1px solid #f0f0f0;
        }
        
        .excellent-status {
            text-align: center;
            padding: 50px;
            background: linear-gradient(135deg, #f0f8ff, #e8f5e8);
            border-radius: 20px;
            margin: 30px 0;
            border: 3px solid #28a745;
        }
        
        .status-icon {
            font-size: 64px;
            margin-bottom: 20px;
        }
        
        .excellent-status h3 {
            color: #28a745;
            font-size: 28px;
            margin-bottom: 20px;
        }
        
        .excellent-status p {
            color: #666;
            font-size: 18px;
            margin-bottom: 25px;
        }
        
        .positive-indicators {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }
        
        .indicator {
            background: white;
            padding: 15px;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 500;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        /* ESOLLL AI –°–ï–ö–¶–ò–Ø */
        .esolll-ai-section {
            padding: 40px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            position: relative;
            overflow: hidden;
        }
        
        .esolll-ai-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="15" height="15" patternUnits="userSpaceOnUse"><path d="M 15 0 L 0 0 0 15" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
            opacity: 0.4;
        }
        
        .ai-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 40px;
            position: relative;
            z-index: 5;
        }
        
        .ai-logo {
            font-size: 72px;
            animation: float 4s ease-in-out infinite;
        }
        
        .ai-title h2 {
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 8px;
        }
        
        .ai-title p {
            opacity: 0.9;
            font-size: 16px;
        }
        
        .ai-badge {
            background: rgba(255,255,255,0.2);
            padding: 15px 25px;
            border-radius: 30px;
            font-weight: 700;
            font-size: 16px;
            backdrop-filter: blur(15px);
        }
        
        .ai-score-panel {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(255,255,255,0.15);
            padding: 30px;
            border-radius: 25px;
            margin-bottom: 40px;
            backdrop-filter: blur(15px);
            position: relative;
            z-index: 5;
        }
        
        .main-score {
            text-align: center;
        }
        
        .score-value {
            font-size: 64px;
            font-weight: 700;
            line-height: 1;
            margin-bottom: 10px;
        }
        
        .score-title {
            font-size: 16px;
            opacity: 0.9;
            font-weight: 500;
        }
        
        .recommendation-panel {
            text-align: center;
        }
        
        .recommendation {
            padding: 15px 30px;
            border-radius: 30px;
            font-weight: 700;
            font-size: 20px;
            margin-bottom: 12px;
            display: inline-block;
        }
        
        .rec-positive { background: #28a745; color: white; }
        .rec-negative { background: #dc3545; color: white; }
        .rec-neutral { background: #ffc107; color: #856404; }
        
        .risk-level, .confidence {
            font-size: 14px;
            opacity: 0.8;
            margin: 5px 0;
        }
        
        .ai-insights-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
            position: relative;
            z-index: 5;
        }
        
        .ai-card {
            background: rgba(255,255,255,0.95);
            color: #333;
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 15px 40px rgba(0,0,0,0.2);
            backdrop-filter: blur(15px);
        }
        
        .ai-card h3 {
            color: #667eea;
            font-size: 20px;
            font-weight: 700;
            margin-bottom: 25px;
            border-bottom: 3px solid #667eea;
            padding-bottom: 10px;
        }
        
        .ai-problems-list {
            display: grid;
            gap: 20px;
        }
        
        .ai-problem {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 15px;
            border-left: 5px solid #667eea;
        }
        
        .sev-high { border-left-color: #dc3545; }
        .sev-medium { border-left-color: #fd7e14; }
        .sev-low { border-left-color: #28a745; }
        
        .problem-name {
            font-weight: 700;
            color: #333;
            font-size: 16px;
            margin-bottom: 8px;
        }
        
        .problem-description {
            color: #666;
            font-size: 14px;
            line-height: 1.5;
            margin-bottom: 10px;
        }
        
        .problem-meta {
            display: flex;
            justify-content: space-between;
            font-size: 12px;
            color: #999;
        }
        
        .emotional-metrics {
            margin-bottom: 25px;
        }
        
        .metric {
            display: flex;
            justify-content: space-between;
            padding: 12px 0;
            border-bottom: 1px solid #f0f0f0;
        }
        
        .metric-label {
            font-weight: 600;
        }
        
        .metric-value {
            font-weight: 700;
        }
        
        .mood-positive { color: #28a745; }
        .mood-negative { color: #dc3545; }
        .mood-neutral { color: #ffc107; }
        
        .frustration-level {
            color: #fd7e14;
        }
        
        .emotional-details {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }
        
        .satisfaction-triggers h4, .pain-triggers h4 {
            color: #667eea;
            font-size: 16px;
            margin-bottom: 10px;
        }
        
        .satisfaction-triggers ul, .pain-triggers ul {
            padding-left: 20px;
        }
        
        .satisfaction-triggers li, .pain-triggers li {
            font-size: 13px;
            margin: 8px 0;
            line-height: 1.4;
        }
        
        .ai-recommendations-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            position: relative;
            z-index: 5;
        }
        
        .recommendations-section {
            margin-bottom: 25px;
        }
        
        .immediate-fixes h4, .strategic-improvements h4 {
            color: #667eea;
            font-size: 16px;
            margin-bottom: 15px;
        }
        
        .immediate-fixes ul, .strategic-improvements ul {
            padding-left: 20px;
            margin-bottom: 20px;
        }
        
        .immediate-fixes li, .strategic-improvements li {
            font-size: 14px;
            margin: 10px 0;
            line-height: 1.5;
        }
        
        .business-insights {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 12px;
        }
        
        .insight-item {
            margin: 12px 0;
            font-size: 14px;
            line-height: 1.5;
        }
        
        .predictions-grid {
            display: grid;
            gap: 15px;
        }
        
        .prediction-item {
            display: flex;
            justify-content: space-between;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 12px;
            font-size: 14px;
        }
        
        .prediction-label {
            font-weight: 600;
        }
        
        .prediction-value {
            font-weight: 700;
            color: #667eea;
        }
        
        .ai-unavailable {
            padding: 40px;
            text-align: center;
            background: #fff3cd;
            border: 3px solid #ffc107;
            border-radius: 20px;
            margin: 40px;
        }
        
        .ai-unavailable h3 {
            color: #856404;
            margin-bottom: 15px;
            font-size: 24px;
        }
        
        .ai-unavailable p {
            color: #856404;
            font-size: 16px;
        }
        
        /* PDF –≠–ö–°–ü–û–†–¢ */
        .pdf-export-section {
            padding: 40px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            text-align: center;
        }
        
        .export-header h3 {
            font-size: 32px;
            margin-bottom: 15px;
            font-weight: 700;
        }
        
        .export-header p {
            font-size: 18px;
            opacity: 0.9;
            margin-bottom: 30px;
        }
        
        .export-buttons {
            display: flex;
            justify-content: center;
            gap: 25px;
            margin: 35px 0;
        }
        
        .export-btn {
            padding: 18px 35px;
            border: none;
            border-radius: 15px;
            font-size: 18px;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 200px;
        }
        
        .export-btn.primary {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            box-shadow: 0 10px 30px rgba(40,167,69,0.4);
        }
        
        .export-btn.secondary {
            background: linear-gradient(135deg, #fd7e14, #e83e8c);
            color: white;
            box-shadow: 0 10px 30px rgba(253,126,20,0.4);
        }
        
        .export-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 40px rgba(0,0,0,0.3);
        }
        
        .export-features {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 25px;
            margin-top: 40px;
        }
        
        .feature-item {
            background: rgba(255,255,255,0.1);
            padding: 25px;
            border-radius: 15px;
            backdrop-filter: blur(15px);
        }
        
        .feature-icon {
            font-size: 40px;
            margin-bottom: 15px;
        }
        
        .feature-text strong {
            display: block;
            font-size: 18px;
            margin-bottom: 8px;
        }
        
        .feature-text {
            font-size: 14px;
            line-height: 1.5;
        }
        
        /* –§–£–¢–ï–† */
        .professional-footer {
            background: linear-gradient(135deg, #2c3e50, #34495e);
            color: white;
            padding: 40px;
            text-align: center;
        }
        
        .footer-content {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 30px;
            margin-bottom: 25px;
        }
        
        .footer-section {
            font-size: 14px;
            line-height: 1.6;
        }
        
        .footer-note {
            font-size: 12px;
            opacity: 0.8;
            font-style: italic;
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid rgba(255,255,255,0.2);
        }
        
        /* –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–¨ */
        @media (max-width: 768px) {
            .container { margin: 10px; }
            .professional-header { padding: 30px 20px; }
            .professional-header h1 { font-size: 28px; }
            .ai-insights-grid { grid-template-columns: 1fr; }
            .ai-recommendations-row { grid-template-columns: 1fr; }
            .export-buttons { flex-direction: column; align-items: center; }
            .export-features { grid-template-columns: 1fr; }
            .footer-content { grid-template-columns: 1fr; }
            .capabilities { justify-content: center; }
            .ai-header { flex-direction: column; gap: 20px; text-align: center; }
            .ai-score-panel { flex-direction: column; gap: 25px; }
            .emotional-details { grid-template-columns: 1fr; }
        }
        
        /* –ü–ï–ß–ê–¢–¨ */
        @media print {
            .pdf-export-section { display: none; }
            * { -webkit-print-color-adjust: exact !important; color-adjust: exact !important; }
            body { background: white !important; }
            .container { box-shadow: none !important; }
            .professional-header { -webkit-print-color-adjust: exact; }
            .esolll-ai-section { -webkit-print-color-adjust: exact; }
            .critical-review-card { page-break-inside: avoid; }
            .ai-card { page-break-inside: avoid; }
        }
        """
    
    def create_professional_footer(self):
        return f"""
        <div class="professional-footer">
            <div class="footer-content">
                <div class="footer-section">
                    <strong>ü§ñ ESOLLL AI Professional Analytics Engine</strong><br>
                    –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º
                </div>
                <div class="footer-section">
                    <strong>üÜï Professional –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</strong><br>
                    –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ ‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ‚Ä¢ AI-–ø—Ä–æ–≥–Ω–æ–∑—ã ‚Ä¢ 10 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
                </div>
                <div class="footer-section">
                    <strong>üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Almas Kasymzhanov</strong><br>
                    üìÖ ESOLLL AI Professional –æ—Ç {datetime.now().strftime('%d.%m.%Y')}
                </div>
            </div>
            <div class="footer-note">
                üß† –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–¥–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            </div>
        </div>
        """
    
    def generate_error_report(self, article_id):
        return f"""
<!DOCTYPE html>
<html><head><meta charset="UTF-8"><title>ESOLLL AI Professional Error</title></head>
<body style="text-align: center; padding: 50px; font-family: Arial;">
<h1>ü§ñ ESOLLL AI Professional Analytics Engine</h1>
<h2>‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö</h2>
<p>–¢–æ–≤–∞—Ä {article_id} - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</p>
</body></html>
        """

class EsolllAIProfessionalBot:
    def __init__(self, telegram_token, mpstats_api_key, anthropic_api_key):
        self.telegram_token = telegram_token
        self.parser = EsolllEnhancedParser(mpstats_api_key)
        self.analyzer = EsolllAIAnalyzer(anthropic_api_key)
        self.reporter = EsolllAIReporter()
        self.offset = 0
        self.running = False
    
    async def send_message(self, chat_id, text, parse_mode='Markdown'):
        async with aiohttp.ClientSession() as session:
            url = f"https://api.telegram.org/bot{self.telegram_token}/sendMessage"
            data = {'chat_id': chat_id, 'text': text, 'parse_mode': parse_mode}
            try:
                async with session.post(url, json=data, timeout=aiohttp.ClientTimeout(total=12)) as response:
                    return response.status == 200
            except:
                return False
    
    async def send_document(self, chat_id, file_path, caption=""):
        if not os.path.exists(file_path):
            return False
        
        async with aiohttp.ClientSession() as session:
            url = f"https://api.telegram.org/bot{self.telegram_token}/sendDocument"
            try:
                with open(file_path, 'rb') as file:
                    data = aiohttp.FormData()
                    data.add_field('chat_id', str(chat_id))
                    data.add_field('document', file, filename=os.path.basename(file_path))
                    if caption:
                        data.add_field('caption', caption)
                    async with session.post(url, data=data, timeout=aiohttp.ClientTimeout(total=35)) as response:
                        return response.status == 200
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
                return False
    
    async def analyze_product_professional(self, article_id, chat_id):
        start_msg = f"""ü§ñ **ESOLLL AI Professional Analytics Engine**
*–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º*

üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–≤–∞—Ä **{article_id}** —Å –ø–æ–º–æ—â—å—é ESOLLL AI
üöÄ **PROFESSIONAL –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:**
‚Ä¢ üß† –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤
‚Ä¢ üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
‚Ä¢ üîÆ AI-–ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ üìù 10 —Å–∞–º—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º

‚è≥ *–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞...*"""
        
        await self.send_message(chat_id, start_msg)
        
        try:
            product_data = await self.parser.get_product_info(article_id)
            
            if not product_data:
                error_msg = f"""‚ùå **–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω**

–¢–æ–≤–∞—Ä **{article_id}** –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ MPStats.

üîÑ **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∞—Ä—Ç–∏–∫—É–ª**"""
                await self.send_message(chat_id, error_msg)
                return False
            
            found_msg = f"""‚úÖ **–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω!**
üì¶ {product_data['name'][:60]}...
üè∑Ô∏è –ë—Ä–µ–Ω–¥: {product_data['brand']}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {product_data['rating']}/5
üí¨ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {product_data['comments']}

ü§ñ **–ó–∞–≥—Ä—É–∂–∞—é –æ—Ç–∑—ã–≤—ã –¥–ª—è ESOLLL AI –∞–Ω–∞–ª–∏–∑–∞...**
üß† **–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É...**"""
            
            await self.send_message(chat_id, found_msg)
            
            reviews = await self.parser.get_extended_reviews(article_id, target_reviews=120)
            
            if not reviews:
                no_reviews_msg = f"""‚ö†Ô∏è **–û—Ç–∑—ã–≤—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã**

–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã –¥–ª—è ESOLLL AI –∞–Ω–∞–ª–∏–∑–∞.
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞—Ä–∏—Ñ–∞ –≤ MPStats."""
                await self.send_message(chat_id, no_reviews_msg)
                return False
            
            processing_msg = f"""‚úÖ **–û—Ç–∑—ã–≤—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ**
ü§ñ **–ó–ê–ü–£–°–ö–ê–Æ ESOLLL AI PROFESSIONAL ENGINE...**
üß† **–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤...**
üí≠ **–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π...**
üìù **–ü–æ–∏—Å–∫ 10 —Å–∞–º—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤...**

‚ö° *–≠—Ç–æ –∑–∞–π–º–µ—Ç 30-90 —Å–µ–∫—É–Ω–¥...*"""
            
            await self.send_message(chat_id, processing_msg)
            
            # –ì–õ–ê–í–ù–û–ï: –∑–∞–ø—É—Å–∫–∞–µ–º ESOLLL AI Professional –∞–Ω–∞–ª–∏–∑
            analysis = await self.analyzer.analyze_with_esolll_professional(reviews, product_data['name'])
            
            if not analysis:
                no_data_msg = f"""‚ö†Ô∏è **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ESOLLL AI –∞–Ω–∞–ª–∏–∑–∞**

–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
                await self.send_message(chat_id, no_data_msg)
                return False
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å ESOLLL AI
            ai_status_msg = "ü§ñ **ESOLLL AI PROFESSIONAL –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!**"
            if analysis.get("ai_powered"):
                esolll_ai_analysis = analysis.get("esolll_ai_analysis", {})
                ai_rating = esolll_ai_analysis.get("esolll_score", {}).get("product_rating", "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
                ai_status_msg += f"\n‚úÖ **ESOLLL AI –æ—Ü–µ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞: {ai_rating}/10**"
                ai_status_msg += "\nüß† **–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω**"
                ai_status_msg += "\nüí≠ **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≥–æ—Ç–æ–≤–∞**"
                ai_status_msg += f"\nüìù **–ù–∞–π–¥–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞**"
            else:
                ai_status_msg += "\n‚ö†Ô∏è **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –±–∞–∑–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (ESOLLL AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)**"
            
            await self.send_message(chat_id, ai_status_msg)
            
            risk_data = self.analyzer.calculate_risk_with_esolll_ai(analysis)
            
            await self.send_message(chat_id, "üéØ **–°–æ–∑–¥–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π ESOLLL AI –æ—Ç—á–µ—Ç...**")
            
            await self.send_professional_results(chat_id, product_data, analysis, risk_data)
            await self.create_professional_report(chat_id, analysis, risk_data, article_id, product_data)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ ESOLLL AI Professional –∞–Ω–∞–ª–∏–∑–∞: {e}")
            error_msg = f"""‚ùå **–û—à–∏–±–∫–∞ ESOLLL AI Professional –∞–Ω–∞–ª–∏–∑–∞**

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–≤–∞—Ä–∞ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."""
            await self.send_message(chat_id, error_msg)
            return False
    
    async def send_professional_results(self, chat_id, product_data, analysis, risk_data):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        esolll_ai_analysis = analysis.get("esolll_ai_analysis", {})
        esolll_score = esolll_ai_analysis.get("esolll_score", {})
        emotional_profile = esolll_ai_analysis.get("emotional_profile", {})
        
        summary = f"""ü§ñ **ESOLLL AI PROFESSIONAL ANALYSIS**

üì¶ **{product_data['name'][:50]}...**
üè∑Ô∏è {product_data['brand']} | ‚≠ê {product_data['rating']}/5 | üí∞ {product_data['price']} ‚ÇΩ

{risk_data['decision_emoji']} **ESOLLL AI –†–ï–®–ï–ù–ò–ï: {risk_data['decision']}**

üìã {risk_data['decision_reason']}"""

        if risk_data.get('esolll_ai_influence'):
            summary += f"\nü§ñ **ESOLLL AI –æ—Ü–µ–Ω–∫–∞: {risk_data.get('esolll_ai_rating', 'N/A')}/10**"
        
        summary += f"""

üÜï **PROFESSIONAL AI –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:**
‚Ä¢ üß† –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å ESOLLL AI Engine
‚Ä¢ üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
‚Ä¢ üîÆ AI-–ø—Ä–æ–≥–Ω–æ–∑—ã —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏
‚Ä¢ üìù 10 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
        
        await self.send_message(chat_id, summary)
        
        # ESOLLL AI –∏–Ω—Å–∞–π—Ç—ã
        if esolll_ai_analysis:
            ai_insights = f"""ü§ñ **ESOLLL AI PROFESSIONAL –ò–ù–°–ê–ô–¢–´:**

üí≠ **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:**
‚Ä¢ –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {emotional_profile.get('overall_mood', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π')}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏–∏: {emotional_profile.get('frustration_level', '5')}/10
‚Ä¢ –†–∏—Å–∫ –ø–æ—Ç–µ—Ä–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: {emotional_profile.get('loyalty_risk', '—Å—Ä–µ–¥–Ω–∏–π')}

üß† **–ß—Ç–æ –≤—ã—è–≤–∏–ª ESOLLL AI:**"""
            
            ai_problems = esolll_ai_analysis.get("esolll_ai_problems", [])
            for i, problem in enumerate(ai_problems[:3], 1):
                severity = problem.get('severity', '—Å—Ä–µ–¥–Ω—è—è')
                severity_emoji = "üö®" if "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è" in severity or "–≤—ã—Å–æ–∫–∞—è" in severity else "‚ö†Ô∏è" if severity == "—Å—Ä–µ–¥–Ω—è—è" else "üìã"
                ai_insights += f"\n{i}. {severity_emoji} **{problem.get('name', '–ü—Ä–æ–±–ª–µ–º–∞')}** ({severity})"
                ai_insights += f"\n   _{problem.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')[:90]}..._"
            
            await self.send_message(chat_id, ai_insights)
            
            # AI –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            predictions = esolll_ai_analysis.get("esolll_predictions", {})
            insights = esolll_ai_analysis.get("professional_insights", {})
            
            ai_recommendations = f"""üîÆ **ESOLLL AI –ü–†–û–ì–ù–û–ó–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**

üìà **–ü—Ä–æ–≥–Ω–æ–∑ —Ç—Ä–µ–Ω–¥–∞:** {predictions.get('sales_trend', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è')}
üìâ **–ü—Ä–æ–≥–Ω–æ–∑ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤:** {predictions.get('return_forecast', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è')}
üë• **–£–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤:** {predictions.get('customer_retention', '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è')}

üéØ **–°—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç ESOLLL AI:**"""
            
            for action in insights.get('immediate_fixes', ['AI –∞–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'])[:3]:
                ai_recommendations += f"\n‚Ä¢ {action}"
            
            ai_recommendations += f"\n\nüíº **–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:** {insights.get('competitive_positioning', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è')}"
            
            await self.send_message(chat_id, ai_recommendations)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 2 –ø—Ä–∏–º–µ—Ä–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –≤ –±–æ—Ç–µ
        critical_reviews = self.reporter.select_top_10_critical_reviews(analysis)
        if critical_reviews:
            examples_msg = f"""üí¨ **–ü–†–ò–ú–ï–†–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–¢–ó–´–í–û–í:**

**–û–¢–ó–´–í #1** (‚≠ê {critical_reviews[0]['rating']}/5):
_{critical_reviews[0]['text'][:200]}..._

**–ü—Ä–æ–±–ª–µ–º—ã:** {', '.join([p['name'] for p in critical_reviews[0]['matched_problems'][:2]])}

---"""
            
            if len(critical_reviews) > 1:
                examples_msg += f"""

**–û–¢–ó–´–í #2** (‚≠ê {critical_reviews[1]['rating']}/5):
_{critical_reviews[1]['text'][:200]}..._

**–ü—Ä–æ–±–ª–µ–º—ã:** {', '.join([p['name'] for p in critical_reviews[1]['matched_problems'][:2]])}"""
            
            examples_msg += f"\n\nüìÑ **–ï—â–µ {max(0, len(critical_reviews) - 2)} –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –≤ –æ—Ç—á–µ—Ç–µ**"
            
            await self.send_message(chat_id, examples_msg)
        else:
            await self.send_message(chat_id, "üí¨ **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —Ç–æ–≤–∞—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!**\n\nüìÑ **–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –æ—Ç—á–µ—Ç–µ**")
        
        # –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
        if analysis.get('problems'):
            problems_text = "üìä **–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è):**\n\n"
            for i, (name, data) in enumerate(analysis['problems'][:3], 1):
                problems_text += f"**{i}. {name}** - {data['percentage']}%\n"
            
            problems_text += "\nüìÑ **–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç ESOLLL AI –≥–æ—Ç–æ–≤–∏—Ç—Å—è...**"
            await self.send_message(chat_id, problems_text)
    
    async def create_professional_report(self, chat_id, analysis, risk_data, article_id, product_data):
        try:
            reports_dir = f"esolll_ai_professional_reports_{article_id}"
            os.makedirs(reports_dir, exist_ok=True)
            
            print(f"ü§ñ –°–æ–∑–¥–∞—é ESOLLL AI Professional –æ—Ç—á–µ—Ç –¥–ª—è {article_id}...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Å ESOLLL AI
            html_content = self.reporter.generate_esolll_ai_report(analysis, risk_data, article_id, product_data)
            
            report_path = os.path.join(reports_dir, f"esolll_ai_professional_report_{article_id}.html")
            
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            esolll_ai_analysis = analysis.get("esolll_ai_analysis", {})
            ai_status = "ü§ñ POWERED BY ESOLLL AI PROFESSIONAL ENGINE" if analysis.get("ai_powered") else "‚ö†Ô∏è –ë–ê–ó–û–í–´–ô –ê–ù–ê–õ–ò–ó (ESOLLL AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
            
            critical_reviews = self.reporter.select_top_10_critical_reviews(analysis)
            critical_count = len(critical_reviews)
            
            report_msg = f"""üìä **ESOLLL AI PROFESSIONAL REPORT –ì–û–¢–û–í**

{ai_status}

üÜï **–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞:**
‚Ä¢ ü§ñ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç ESOLLL AI Engine
‚Ä¢ üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
‚Ä¢ üîÆ AI-–ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ üìù {critical_count} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
‚Ä¢ üìÑ PDF —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–≤–∫–ª—é—á–∞—è –º–æ–±–∏–ª—å–Ω—ã–µ)

üì± **–ú–æ–±–∏–ª—å–Ω–æ-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω**
üí° *–î–ª—è PDF: –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—á–∞—Ç—å PDF" –≤ –æ—Ç—á–µ—Ç–µ*"""
            
            if esolll_ai_analysis:
                ai_rating = esolll_ai_analysis.get("esolll_score", {}).get("product_rating", "N/A")
                mood = esolll_ai_analysis.get("emotional_profile", {}).get("overall_mood", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π")
                recommendation = esolll_ai_analysis.get("esolll_score", {}).get("buy_recommendation", "–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ")
                
                ai_example = f"""ü§ñ **–ü–†–ò–ú–ï–† ESOLLL AI PROFESSIONAL –ê–ù–ê–õ–ò–ó–ê:**

**ESOLLL AI –û—Ü–µ–Ω–∫–∞:** {ai_rating}/10
**–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:** {mood}
**AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {recommendation}
**–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:** {critical_count}

üß† **–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤—ã—è–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏**
üí≠ **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –ø–æ—Å—Ç—Ä–æ–µ–Ω**
üìÑ **–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç—á–µ—Ç–µ**"""
                await self.send_message(chat_id, ai_example)
            
            await self.send_message(chat_id, report_msg)
            await self.send_document(chat_id, report_path, f"ü§ñ ESOLLL AI Professional Report | {product_data['name'][:30]}...")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ESOLLL AI Professional –æ—Ç—á–µ—Ç–∞: {e}")
            
            error_msg = """‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ESOLLL AI Professional –æ—Ç—á–µ—Ç–∞**

–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å –ò–ò.
ESOLLL AI –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ–∑–∂–µ."""
            await self.send_message(chat_id, error_msg)
            return False
    
    async def process_message(self, message):
        chat_id = message['chat']['id']
        text = message.get('text', '')
        
        if text == '/start':
            welcome = """ü§ñ **ESOLLL AI Professional Analytics Engine**
*–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º*

**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** Almas Kasymzhanov

üÜï **PROFESSIONAL AI –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:**
‚Ä¢ üß† **–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑** - ESOLLL AI –ø–æ–Ω–∏–º–∞–µ—Ç —Å–º—ã—Å–ª –æ—Ç–∑—ã–≤–æ–≤
‚Ä¢ üí≠ **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞** - –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π  
‚Ä¢ üîÆ **AI-–ø—Ä–æ–≥–Ω–æ–∑—ã** - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø—Ä–æ–±–ª–µ–º
‚Ä¢ üìù **10 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤** - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
‚Ä¢ üéØ **–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è

üöÄ **–ß–¢–û –í–´ –ü–û–õ–£–ß–ò–¢–ï:**
‚Ä¢ –ì–ª—É–±–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ –æ—Ç–∑—ã–≤–∞—Ö
‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —ç–º–æ—Ü–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
‚Ä¢ 10 —Å–∞–º—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å —Ä–∞–∑–±–æ—Ä–æ–º
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏ —Å —Ç–æ–≤–∞—Ä–æ–º
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å PDF —ç–∫—Å–ø–æ—Ä—Ç–æ–º

üìù **–ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ —Å Wildberries (6+ —Ü–∏—Ñ—Ä)
–ü—Ä–∏–º–µ—Ä: 348518462

ü§ñ **–ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å ESOLLL AI Professional!**"""
            
            await self.send_message(chat_id, welcome)
        
        elif text == '/help':
            help_text = """üìö **–ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ ESOLLL AI PROFESSIONAL**

üöÄ **–ë–´–°–¢–†–´–ô –°–¢–ê–†–¢:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ Wildberries (6+ —Ü–∏—Ñ—Ä)
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è AI-–∞–Ω–∞–ª–∏–∑–∞ (30-90 —Å–µ–∫—É–Ω–¥)
3. –ü–æ–ª—É—á–∏—Ç–µ 2 –ø—Ä–∏–º–µ—Ä–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –≤ —á–∞—Ç–µ
4. –°–∫–∞—á–∞–π—Ç–µ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å 10 –æ—Ç–∑—ã–≤–∞–º–∏ –∏ PDF —ç–∫—Å–ø–æ—Ä—Ç–æ–º

üìù **–ü–†–ò–ú–ï–†–´ –ê–†–¢–ò–ö–£–õ–û–í:**
‚Ä¢ 348518462
‚Ä¢ 21676342  
‚Ä¢ 156789123

ü§ñ **–ß–¢–û –í–´ –ü–û–õ–£–ß–ò–¢–ï:**
‚Ä¢ ESOLLL AI –æ—Ü–µ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞ (1-10)
‚Ä¢ 10 —Å–∞–º—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º
‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
‚Ä¢ PDF –æ—Ç—á–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö

üìä **–°–¢–†–£–ö–¢–£–†–ê –û–¢–ß–ï–¢–ê:**
1. **–†–µ—à–µ–Ω–∏–µ AI** - –ø–æ–∫—É–ø–∞—Ç—å/–Ω–µ –ø–æ–∫—É–ø–∞—Ç—å/–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
2. **10 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤** - –ø–æ–ª–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã —Å —Ä–∞–∑–±–æ—Ä–æ–º –ø—Ä–æ–±–ª–µ–º
3. **ESOLLL AI –∏–Ω—Å–∞–π—Ç—ã** - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑  
4. **–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
5. **PDF —ç–∫—Å–ø–æ—Ä—Ç** - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

üí° **–ü–û–õ–ï–ó–ù–´–ï –°–û–í–ï–¢–´:**
‚Ä¢ –õ—É—á—à–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å 50+ –æ—Ç–∑—ã–≤–∞–º–∏
‚Ä¢ –û—Ç—á–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
‚Ä¢ –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –æ—Ç—á–µ—Ç–µ
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ä—É—Å—Å–∫–∏–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏

üì± **–ú–û–ë–ò–õ–¨–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:**
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏ –ø–ª–∞–Ω—à–µ—Ç–æ–≤
‚Ä¢ PDF —ç–∫—Å–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–∂–µ –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ

ü§ñ **ESOLLL AI Professional Analytics Engine**
**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Almas Kasymzhanov**"""
            
            await self.send_message(chat_id, help_text)
        
        elif text == '/info':
            info_text = """‚ÑπÔ∏è **–û –°–ò–°–¢–ï–ú–ï ESOLLL AI PROFESSIONAL**

üë®‚Äçüíª **–û –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ï:**
**–ê–ª–º–∞—Å –ö–∞—Å—ã–º–∂–∞–Ω–æ–≤** - –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Å–µ–ª–ª–µ—Ä –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö Wildberries –∏ Kaspi.kz —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 3 –ª–µ—Ç.

üéØ **–≠–ö–°–ü–ï–†–¢–ò–ó–ê –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê:**
‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–π e-commerce –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å
‚Ä¢ ML –∏ AI —ç–Ω—Ç—É–∑–∏–∞—Å—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤  
‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–µ–ª–ª–µ—Ä–æ–≤

ü§ñ **ESOLLL AI PROFESSIONAL SYSTEM:**
**ESOLLL AI Professional Analytics Engine** - —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–æ–º–º–µ—Ä—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

üîß **–¢–ï–•–ù–û–õ–û–ì–ò–ò:**
‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (Machine Learning)
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (NLP)
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π (Sentiment Analysis)
‚Ä¢ –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤

üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ 120 –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ —Å–µ–∞–Ω—Å
‚Ä¢ –í—ã—è–≤–ª—è–µ—Ç 10+ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–±–ª–µ–º —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç –¥–æ 10 —Å–∞–º—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
‚Ä¢ –°—Ç—Ä–æ–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
‚Ä¢ –î–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

üéØ **–î–õ–Ø –ö–û–ì–û –ü–û–î–•–û–î–ò–¢:**
‚Ä¢ –ü—Ä–æ–¥–∞–≤—Ü—ã –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö Wildberries, Ozon, Kaspi
‚Ä¢ –ë—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∏ e-commerce
‚Ä¢ –ò–Ω–≤–µ—Å—Ç–æ—Ä—ã –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∫–æ–º–º–µ—Ä—Ü–∏—é
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –±–∏–∑–Ω–µ—Å–∞

üèÜ **–ú–ò–°–°–ò–Ø –ü–†–û–ï–ö–¢–ê:**
–ü–æ–º–æ—á—å —Å–µ–ª–ª–µ—Ä–∞–º –∏ –±—Ä–µ–Ω–¥–∞–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ AI-–∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π, –≤—ã—è–≤–ª—è—è —Å–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞.

ü§ñ **ESOLLL AI Professional Analytics Engine v3.0**
**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –ê–ª–º–∞—Å –ö–∞—Å—ã–º–∂–∞–Ω–æ–≤**"""
            
            await self.send_message(chat_id, info_text)
        
        else:
            article_match = re.search(r'\b\d{6,}\b', text)
            
            if article_match:
                article_id = article_match.group()
                print(f"ü§ñ ESOLLL AI Professional –∞–Ω–∞–ª–∏–∑ –∞—Ä—Ç–∏–∫—É–ª–∞ {article_id}")
                await self.analyze_product_professional(article_id, chat_id)
            else:
                error_message = """‚ùå **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª Wildberries**

üìã **–§–æ—Ä–º–∞—Ç:** 6+ —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: 348518462)

ü§ñ **–ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π ESOLLL AI Professional –∞–Ω–∞–ª–∏–∑:**
‚Ä¢ üß† –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
‚Ä¢ üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
‚Ä¢ üìù 10 —Å–∞–º—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ä–∞–∑–±–æ—Ä–æ–º
‚Ä¢ üîÆ AI-–ø—Ä–æ–≥–Ω–æ–∑—ã —Ç—Ä–µ–Ω–¥–æ–≤ –∏ —Ä–∏—Å–∫–æ–≤
‚Ä¢ üéØ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ üìÑ PDF —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

üöÄ **ESOLLL AI Professional Analytics Engine**
**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Almas Kasymzhanov**"""
                
                await self.send_message(chat_id, error_message)
    
    async def get_updates(self):
        async with aiohttp.ClientSession() as session:
            url = f"https://api.telegram.org/bot{self.telegram_token}/getUpdates"
            params = {'offset': self.offset, 'timeout': 5}
            
            try:
                async with session.get(url, params=params, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('ok'):
                            for update in data['result']:
                                self.offset = update['update_id'] + 1
                                if 'message' in update:
                                    await self.process_message(update['message'])
                            return True
                    return False
            except:
                return True
    
    async def run_professional_bot(self, cycles=100):
        print("ü§ñ –ó–ê–ü–£–°–ö ESOLLL AI PROFESSIONAL ANALYTICS ENGINE")
        print("=" * 80)
        print("üè¢ ESOLLL AI Professional Analytics Engine")
        print("üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Almas Kasymzhanov")
        print("ü§ñ Powered by: Advanced AI & Machine Learning")
        print("üÜï Professional –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("  ‚Ä¢ üß† –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤")
        print("  ‚Ä¢ üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π")
        print("  ‚Ä¢ üìù 10 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º")
        print("  ‚Ä¢ üîÆ AI-–ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        print("  ‚Ä¢ üìÑ PDF —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        print("=" * 80)
        
        self.running = True
        
        for i in range(cycles):
            if not self.running:
                break
            print(f"üîÑ –¶–∏–∫–ª {i+1}/{cycles} - ESOLLL AI Professional –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É")
            await self.get_updates()
            await asyncio.sleep(2)
        
        print("‚èπÔ∏è ESOLLL AI Professional Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def stop(self):
        self.running = False

async def start_esolll_ai_professional():
    """üöÄ –ó–ê–ü–£–°–ö ESOLLL AI PROFESSIONAL ANALYTICS ENGINE"""
    telegram_token = "7379556579:AAHXWwnYjcJpvTvN83nAUs04uHAykoQv-YM"
    mpstats_api_key = "68528ad55e29e6.1236050249227088a63f52d8d31984bc88a498c4"
    anthropic_api_key = "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"
    
    print("ü§ñ ESOLLL AI PROFESSIONAL ANALYTICS ENGINE")
    print("=" * 80)
    print("üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Almas Kasymzhanov")
    print("ü§ñ Powered by: ESOLLL AI Professional Engine")
    print("üìä –í–µ—Ä—Å–∏—è: Professional Analytics - –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    print("üÜï Professional –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("  ‚Ä¢ üß† –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    print("  ‚Ä¢ üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π")
    print("  ‚Ä¢ üìù 10 —Å–∞–º—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º")
    print("  ‚Ä¢ üîÆ AI-–ø—Ä–æ–≥–Ω–æ–∑—ã —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("  ‚Ä¢ üìÑ PDF —ç–∫—Å–ø–æ—Ä—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
    print("=" * 80)
    
    try:
        bot = EsolllAIProfessionalBot(telegram_token, mpstats_api_key, anthropic_api_key)
        print("\n‚úÖ ESOLLL AI PROFESSIONAL BOT –°–û–ó–î–ê–ù!")
        print("ü§ñ ESOLLL AI Professional Engine –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤")
        print("üß† –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        print("üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        print("üìù –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ 10 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –≥–æ—Ç–æ–≤–∞")
        print("üîÆ AI-–ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã")
        print("üìÑ PDF —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("=" * 80)
        return bot
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ESOLLL AI Professional –±–æ—Ç–∞: {e}")
        return None

# =====================================
# ü§ñ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–ï–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê
# =====================================

print("ü§ñ ESOLLL AI PROFESSIONAL ANALYTICS ENGINE –ì–û–¢–û–í!")
print("=" * 80)
print("üìã –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ó–ê–ü–£–°–ö–ê PROFESSIONAL –°–ò–°–¢–ï–ú–´:")
print()
print("# 1. –°–æ–∑–¥–∞–Ω–∏–µ ESOLLL AI Professional –±–æ—Ç–∞:")
print("professional_bot = await start_esolll_ai_professional()")
print()
print("# 2. –ó–∞–ø—É—Å–∫ ESOLLL AI Professional —Å–∏—Å—Ç–µ–º—ã:")
print("if professional_bot:")
print("    await professional_bot.run_professional_bot(100)")
print()
print("=" * 80)
print("üÜï –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò PROFESSIONAL VERSION:")
print("‚Ä¢ üß† –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
print("‚Ä¢ üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π")  
print("‚Ä¢ üìù 10 —Å–∞–º—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º")
print("‚Ä¢ üîÆ AI-–ø—Ä–æ–≥–Ω–æ–∑—ã —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
print("‚Ä¢ üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
print("‚Ä¢ üìÑ PDF —ç–∫—Å–ø–æ—Ä—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
print("‚Ä¢ üé® –ö—Ä–∞—Å–∏–≤—ã–µ –æ—Ç—á–µ—Ç—ã —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º")
print("‚Ä¢ üì± –ü–æ–ª–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
print("=" * 80)
print("ü§ñ Powered by ESOLLL AI Professional Analytics Engine")
print("üöÄ ESOLLL AI Professional E-commerce Solutions")
print("üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Almas Kasymzhanov")
# –í –°–ê–ú–û–ú –ö–û–ù–¶–ï –§–ê–ô–õ–ê –î–û–ë–ê–í–¨–¢–ï:
import os

async def start_esolll_ai_professional():
    """üöÄ –ó–ê–ü–£–°–ö ESOLLL AI PROFESSIONAL ANALYTICS ENGINE –î–õ–Ø RAILWAY"""
    telegram_token = os.getenv("TELEGRAM_TOKEN", "7379556579:AAHXWwnYjcJpvTvN83nAUs04uHAykoQv-YM")
    mpstats_api_key = os.getenv("MPSTATS_API_KEY", "68528ad55e29e6.1236050249227088a63f52d8d31984bc88a498c4")
    anthropic_api_key = os.getenv("ANTHROPIC_API_KEY", "your-anthropic-key-here")
    
    print("ü§ñ ESOLLL AI PROFESSIONAL ANALYTICS ENGINE")
    print("=" * 80)
    print("üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Almas Kasymzhanov")
    print("ü§ñ Powered by: ESOLLL AI Professional Engine")
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –ø–µ—á–∞—Ç–∏ ...
    
    try:
        bot = EsolllAIProfessionalBot(telegram_token, mpstats_api_key, anthropic_api_key)
        print("\n‚úÖ ESOLLL AI PROFESSIONAL BOT –°–û–ó–î–ê–ù!")
        return bot
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

if __name__ == "__main__":
    async def main():
        bot = await start_esolll_ai_professional()
        if bot:
            print("üöÄ ESOLLL AI Professional Bot –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!")
            await bot.run_professional_bot(999999)  # –î–ª—è 24/7 —Ä–∞–±–æ—Ç—ã
    
    asyncio.run(main())
